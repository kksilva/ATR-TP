// *** Bibliotecas ***
#include <iostream>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <errno.h>
#include <signal.h>
#include <conio.h>		                                                        
#include <math.h>                                                               
#include <time.h>
#include <string.h>
#include <locale.h>
#include <process.h>
#include <string>
//#define _CHECKERROR	1
//#include "CheckForError.h"   

// *** Constantes ***
#define WIN32_LEAN_AND_MEAN 
#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1
DWORD WINAPI WaitEventFunc(LPVOID);
// Tamanho das Mensagens
#define TAMANHO_MSG_PROCESSO 42+1
#define TAMANHO_MSG_ALARME 19+1


// ** Handles **
HANDLE hEventoTeclaEsc, hEventoTeclaQ;
HANDLE  hEventoTudoPronto, hEventoExibicaoProcessoPronta;
HANDLE hMsgAlarmeDisponivel, hMsgProcessoDisponivel;
HANDLE hMailslot;

// ** Funções **
void LerMensagemAlarme();
void LerMensagemProcesso();

int main() {
    
    // 1. Inicialização
    SetConsoleTitle("Dados do Processo");
    printf("============ Exibicao Mensagens Dados do Processo & Alarmes ============\n");


    printf("*** Tarefa de Exibicao de Dados de Processo Iniciada ***\n");



    // 1. Abre os eventos vindos de outros processos
    hEventoTeclaEsc = OpenEvent(EVENT_ALL_ACCESS, FALSE, "TeclaESC");
    if (hEventoTeclaEsc == 0) { printf("[EXIBICAO] Erro na abertura do evento <Tecla ESC Pressionada>\n"); exit(-1); }
    hEventoTeclaQ = OpenEvent(EVENT_ALL_ACCESS, FALSE, "TeclaQ");
    if (hEventoTeclaQ == 0) { printf("[EXIBICAO] Erro na abertura do evento <Tecla Q Pressionada>\n"); exit(-1); }

    hEventoTudoPronto = OpenEvent(EVENT_ALL_ACCESS, FALSE, "TudoPronto");
    if (hEventoTudoPronto == 0) { printf("[EXIBICAO] Erro na abertura do evento <Tudo Pronto>\n"); exit(-1); }
    hEventoExibicaoProcessoPronta = OpenEvent(EVENT_ALL_ACCESS, FALSE, "ExibicaoProcessoPronta");
    if (hEventoExibicaoProcessoPronta == 0) { printf("[EXIBICAO] Erro na abertura do evento <Exibicao Processo Pronta>\n"); exit(-1); }

    hMsgAlarmeDisponivel = OpenEvent(EVENT_ALL_ACCESS, FALSE, "MsgAlarmeDisponivel");
    if (hMsgAlarmeDisponivel == 0) { printf("[EXIBICAO] Erro na abertura do evento <MsgAlarmeDisponivel>\n"); exit(-1); }
    hMsgProcessoDisponivel = OpenEvent(EVENT_ALL_ACCESS, FALSE, "MsgProcessoDisponivel");
    if (hMsgProcessoDisponivel == 0) { printf("[EXIBICAO] Erro na abertura do evento <MsgProcessoDisponivel>\n"); exit(-1); }


    // Cria o Mailslot
    hMailslot = CreateMailslot(
        "\\\\.\\mailslot\\MailslotProcesso",
        0,
        MAILSLOT_WAIT_FOREVER,
        NULL);



    // Avisa que está pronta e espera as outras
    printf("*** Tarefa de Exibicao de Dados de Processo Pronta para Executar! ***\n");
    SetEvent(hEventoExibicaoProcessoPronta);
    WaitForSingleObject(hEventoTudoPronto, INFINITE);


    // Começa a Rotina
    HANDLE hEventos[4] = { hEventoTeclaQ,  hEventoTeclaEsc, hMsgAlarmeDisponivel, hMsgProcessoDisponivel };
    DWORD retornoSincronizacao;

    // 2. Aguarda a sinalizacao de um evento
    do {
        int countPerdasAlarme = 0;
        int countPerdasProcesso = 0;

        retornoSincronizacao = WaitForMultipleObjects(4, hEventos, FALSE, INFINITE);

        if (retornoSincronizacao == (WAIT_OBJECT_0 + 0)) {             // hEventoTeclaQ: exibição de dados de processo
            // Bloqueia-se esperando a tecla Q novamente ou a tecla ESC
            printf("*** Tarefa de Exibicao de Dados do Processo Bloqueada! ***\n");
            do {
                retornoSincronizacao = WaitForMultipleObjects(4, hEventos, FALSE, INFINITE);

            } while ((retornoSincronizacao != (WAIT_OBJECT_0 + 0)) && (retornoSincronizacao != (WAIT_OBJECT_0 + 1)));

            printf("*** Tarefa de Exibicao de Dados do Processo Desbloqueada! ***\n");
        }

        else if (retornoSincronizacao == (WAIT_OBJECT_0 + 2)) {
            LerMensagemAlarme();
        }
        else if (retornoSincronizacao == (WAIT_OBJECT_0 + 3)) {
            LerMensagemProcesso();
        }


    } while (retornoSincronizacao != (WAIT_OBJECT_0 + 1));

    printf("*** Finalizando Tarefa de Exibicao de Dados de Processo! ***\n");

    // 3. Lista Circular



    // recebe o evento de bloqueio e o esc
    // recebe ids de comunicação com as tarefas de captura
    // criar objetos de sincronização
        // mutex de leitura/escrita da lista circular
        // evento de temporização
    // criar a lista circular
    // gerar mensagem
        // armazenar mensagem na lista
    // wait for multiple, bloqueio ou ESC


    CloseHandle(hEventoTeclaEsc);
    CloseHandle(hEventoTeclaQ);
    CloseHandle(hEventoTudoPronto);
    CloseHandle(hEventoExibicaoProcessoPronta);
    CloseHandle(hMailslot);
    CloseHandle(hMsgAlarmeDisponivel);
    CloseHandle(hMsgProcessoDisponivel);

    return 0;
}

void LerMensagemAlarme() {
    char mensagem[TAMANHO_MSG_ALARME];
    BOOL status;
    DWORD bytesLidos;
    status = ReadFile(hMailslot, mensagem, TAMANHO_MSG_ALARME, &bytesLidos, NULL);
    if (status == 0) { printf("[EXIBICAO PROCESSO] Erro na abertura na leitura da mensagem\n"); exit(-1); }

    printf("alarme:\n>>%s\n", mensagem);
    return;

}

void LerMensagemProcesso() {

    char mensagem[TAMANHO_MSG_PROCESSO];
    BOOL status;
    DWORD bytesLidos;
    status = ReadFile(hMailslot, mensagem, TAMANHO_MSG_PROCESSO, &bytesLidos, NULL);
    if (status == 0) { printf("[EXIBICAO PROCESSO] Erro na abertura na leitura da mensagem\n"); exit(-1); }

    printf("mensagem:\n>>%s\n", mensagem);
    return;
}
